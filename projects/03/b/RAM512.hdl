// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way (in=load, sel=address[6..8], a=loadRAM64A, b=loadRAM64B, c=loadRAM64C, d=loadRAM64D, e=loadRAM64E, f=loadRAM64F, g=loadRAM64G, h=loadRAM64H);
    RAM64 (in=in, load=loadRAM64A, address=address[0..5], out=outRAM64A);
    RAM64 (in=in, load=loadRAM64B, address=address[0..5], out=outRAM64B);
    RAM64 (in=in, load=loadRAM64C, address=address[0..5], out=outRAM64C);
    RAM64 (in=in, load=loadRAM64D, address=address[0..5], out=outRAM64D);
    RAM64 (in=in, load=loadRAM64E, address=address[0..5], out=outRAM64E);
    RAM64 (in=in, load=loadRAM64F, address=address[0..5], out=outRAM64F);
    RAM64 (in=in, load=loadRAM64G, address=address[0..5], out=outRAM64G);
    RAM64 (in=in, load=loadRAM64H, address=address[0..5], out=outRAM64H);
    Mux8Way16 (a=outRAM64A, b=outRAM64B, c=outRAM64C, d=outRAM64D, e=outRAM64E, f=outRAM64F, g=outRAM64G, h=outRAM64H, sel=address[6..8], out=out);
}